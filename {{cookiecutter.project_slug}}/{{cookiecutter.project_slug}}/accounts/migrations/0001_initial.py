# Generated by Django 3.0.3 on 2020-02-11 23:57

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import {{ cookiecutter.project_slug }}.accounts.models.user
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Universally unique object identifier', primary_key=True, serialize=False, verbose_name='universal unique id')),
                ('email', models.EmailField(error_messages={'unique': 'A user with this email address already exists.'}, max_length=255, unique=True, verbose_name='email address')),
                ('is_verified', models.BooleanField(default=False, help_text="Designates if this user's email has been verified.", verbose_name='email verified')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'ordering': ['-date_joined'],
            },
            managers=[
                ('objects', {{ cookiecutter.project_slug }}.accounts.models.user.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Session',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Universally unique object identifier', primary_key=True, serialize=False, verbose_name='universal unique id')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='This is the timestamp of the object creation.', verbose_name='created at')),
                ('updated', models.DateTimeField(auto_now=True, help_text='This is the timestamp of the object update', verbose_name='updated at')),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Designates if this object should be considered active or not or to simulate soft delete behaviour.', verbose_name='active')),
                ('digest', models.CharField(max_length=255, verbose_name='digest')),
                ('key', models.CharField(max_length=255, unique=True, verbose_name='key')),
                ('salt', models.CharField(max_length=255, unique=True, verbose_name='salt')),
                ('expires', models.DateTimeField(blank=True, db_index=True, null=True, verbose_name='expires at')),
                ('user_agent', models.TextField(editable=False, help_text='User-Agent of session with which user has logged in.', verbose_name='user agent')),
                ('ip_address', models.GenericIPAddressField(blank=True, help_text='IP address of client. Web servers and proxies are ignored as best as possible.', null=True, verbose_name='ip address')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sessions', to=settings.AUTH_USER_MODEL, verbose_name='user')),
            ],
            options={
                'verbose_name': 'session',
                'verbose_name_plural': 'sessions',
                'ordering': ['-created'],
            },
        ),
    ]
